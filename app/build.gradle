apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'
//apply plugin: 'android-aspectjx'


def config = rootProject.ext.android // 配置

android {
    compileSdkVersion config.compileSdkVersion
    defaultConfig {
        applicationId "com.minic.kt"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    // dataBinding
    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }


    //自定义一个任务，实现打包meisha渠道自动上传到fir
    task assembleWithFir{
        dependsOn 'assembleDebug'
        doLast{
            def appname="薄荷健康"
            def apppackage=project.android.defaultConfig.applicationId
            def appversion=project.android.defaultConfig.versionName
            def appbuild=project.android.defaultConfig.versionCode
            def apitoken="368967b71745181a78ea8cb01ab237c5"
            def apkpath = applicationVariants.first().outputs.first().outputFile
            def apklogo=apkpath.parent.split("build")[0] + "src/main/res/drawable/icon.png"
            println("路径:" + apklogo)
            //调用python脚本  这个脚本需要放在app工程目录下，不要放在project目录下
            def process="python UploadToFir.py ${appname} ${apppackage} ${appversion} ${appbuild} ${apitoken} ${apklogo} ${apkpath}".execute()
            //打印Python脚本日志，便于出错调试
            ByteArrayOutputStream result = new ByteArrayOutputStream()
            def inputStream = process.getInputStream()
            byte[] buffer = new byte[1024]
            int length
            while ((length = inputStream.read(buffer)) != -1) {
                result.write(buffer, 0, length)
            }
            println(result.toString("utf-8"))
            int exitValue = process.waitFor()
            println "上传结束 with value $exitValue"
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':base')
    implementation project(':commonres')
    implementation project(':image_loader')
    kapt "androidx.databinding:databinding-compiler:$gradle_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.scwang.smartrefresh:SmartRefreshLayout:$smartrefresh_layout_version"
    implementation "com.scwang.smartrefresh:SmartRefreshHeader:$smartrefresh_layout_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation 'jp.wasabeef:glide-transformations:4.1.0'
    implementation "androidx.paging:paging-runtime:$paging_version"
    implementation 'com.youth.banner:banner:1.4.10'
    implementation 'com.drakeet.multitype:multitype:4.0.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$savedstate_version"
    implementation 'de.hdodenhof:circleimageview:3.0.1'
}
